---
openapi: 3.0.3
info:
  title: Habitica API
  description: Habitica API representation as OpenAPI spec
  version: 1.0.0
  contact: 
    name: Specification repository
    url: https://github.com/igromanru/habitica-api
externalDocs:
  url: https://habitica.com/apidoc/
  description: Official Habitica API Documentation
servers:
  - url: https://habitica.com/api
    description: Habitica API server
tags: 
  - name: default
  - name: members
    description: Habitica members related requests
  - name: user
    description: User related requests
  - name: tasks
    description: Tasks related requests
  - name: party
    description: Party related requests
  - name: groups
    description: Groups related requests
  - name: challenges
    description: Challenges related requests
  - name: webhook
    description: Webhooks
  - name: news
    description: Habitica news
components:
  securitySchemes:
    userId:
      type: apiKey
      in: header
      name: x-api-user
    apiToken:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    NewsPost:
      type: object
      properties:
        title:
          type: string
          description: The title of the news article.
        text:
          type: string
          description: The content or body of the news article.
        credits:
          type: string
          description: The credits or source of the news article.
        author:
          type: string
          description: The author of the news article.
        publishDate:
          type: string
          format: date-time
          description: The timestamp of the news article publication.
        published:
          type: boolean
          description: Specifies whether the news article is published.
      required:
        - title
        - text
        - credits
        - author
        - publishDate
        - published
    StatAllocation:
      type: object
      properties:
        stats:
          type: object
          properties:
            int:
              type: number
              description: The number of points to allocate to INT (Intelligence) stat.
            str:
              type: number
              description: The number of points to allocate to STR (Strength) stat.
            con:
              type: number
              description: The number of points to allocate to CON (Constitution) stat.
            per:
              type: number
              description: The number of points to allocate to PER (Perception) stat.
          required:
            - int
            - str
            - con
            - per
paths:
  /v3/status:
    get:
      summary: Get Habitica API status
      description: Endpoint to get the current status of the Habitica API.
      responses:
        "200":
          description: Habitica API status retrieved successfully
          content:
            application/json:
              example:
                status: up
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: down
                message: The Habitica API is currently experiencing issues
  /v3/cron:
    post:
      summary: Run cron
      description:
        This causes cron to run. It assumes that the user has already been
        shown the Record Yesterday's Activity ("Check off any Dailies you did
        yesterday") screen and so it will immediately apply damage for
        incomplete due Dailies.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Cron executed successfully
          content:
            application/json:
              example:
                success: true
                message: Cron executed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
  /v4/bug-report:
    post:
      summary: Submit a bug report
      description: Submit a bug report for the Habitica application.      
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The bug report message.
                email:
                  type: string
                  format: email
                  description: The email address of the bug reporter.
              required:
                - message
                - email
      responses:
        '201':
          description: Bug report submitted successfully
          content:
            application/json:
              example:
                message: Bug report submitted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid bug report data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/members/{memberId}:
    parameters:
      - name: memberId
        in: path
        description: ID of the member to retrieve
        required: true
        schema:
          type: string
        example: member123
    get:
      summary: Get member by ID
      description: Retrieve information about a specific member by member ID.
      tags:
        - members
      responses:
        "200":
          description: Member retrieved successfully
          content:
            application/json:
              example:
                id: member123
                username: john_doe
                displayName: John Doe
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Member not found
          content:
            application/json:
              example:
                error: Member with ID member123 not found
  /v3/user:
    get:
      summary: Get user information
      description: Retrieve information about the user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              example:
                _id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                username: my_username
                email: my_email@example.com
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/anonymized:
    get:
      summary: Get anonymized user data
      description: Retrieve anonymized data for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Anonymized user data retrieved successfully
          content:
            application/json:
              example:
                id: user123
                username: anonymousUser
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/class/cast/{spellId}:
    post:
      summary: Cast a skill (spell) on yourself or a target
      description: |
        **Mage:** fireball = "Burst of Flames", mpheal = "Ethereal Surge", earth = "Earthquake", frost = "Chilling Frost" \
        **Warrior:** smash = "Brutal Smash", defensiveStance = "Defensive Stance", valorousPresence = "Valorous Presence", intimidate = "Intimidating Gaze" \
        **Rogue:** pickPocket = "Pickpocket", backStab = "Backstab", toolsOfTrade = "Tools of the Trade", stealth = "Stealth" \
        **Healer:** heal = "Healing Light", protectAura = "Protective Aura", brightness = "Searing Brightness", healAll = "Blessing" \
        **Transformation Items:** snowball = "Snowball", spookySparkles = "Spooky Sparkles", seafoam = "Seafoam", shinySeed = "Shiny Seed"
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: spellId
          in: path
          description: ID of the spell to cast
          required: true
          schema:
            type: string
            enum: [fireball, mpheal, earth, frost, smash, defensiveStance, valorousPresence, intimidate, pickPocket, backStab, toolsOfTrade, stealth, heal, protectAura, brightness, healAll, snowball, spookySparkles, seafoam, shinySeed]
        - name: targetId
          in: query
          description: User ID of the target (optional)
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Spell cast successfully
          content:
            application/json:
              example:
                message: Spell cast successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid request parameters
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/custom-day-start:
    post:
      summary: Set Custom Day Start time for user
      description: Set the custom day start time for a user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dayStart:
                  type: number
                  description: The hour number (0-23) for the day to begin. If not supplied, it will default to 0.
                  default: 0
                  example: 2
      responses:
        "200":
          description: Custom day start time set successfully
          content:
            application/json:
              example:
                success: true
                data:
                  message: Your custom day start has changed.
                notifications: []
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                error: BadRequest
                message: User validation failed
                errors:
                  - message: Path `preferences.dayStart` (25) is more than the maximum allowed value (23).
                    path: preferences.dayStart
                    value: 25
  /v3/user/buy-health-potion:
    post:
      summary: Buy a health potion
      description: Purchase a health potion for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Health potion purchased successfully
          content:
            application/json:
              example:
                message: Health potion purchased successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/allocate:
    post:
      summary: Allocate a single Stat Point 
      description: Put a single Stat Point into a specific stat.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: stat
          in: query
          description: The stat to increase (str, con, int, or per)
          required: true
          schema:
            type: string
            enum: [str, con, int, per]
      responses:
        '200':
          description: Stat Point allocated successfully
          content:
            application/json:
              example:
                message: Stat Point allocated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid request parameters
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/allocate-now:
    post:
      summary: Allocate all Stat Points
      description: "Uses the user's chosen automatic allocation method, or if none, assigns all to STR. Note: will return success, even if there are 0 points to allocate."
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Stat points allocated successfully
          content:
            application/json:
              example:
                message: Stat points allocated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/allocate-bulk:
    post:
      summary: Allocate multiple Stat Points
      description: Allocate multiple stat points for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatAllocation'
      responses:
        '200':
          description: Stat points allocated successfully
          content:
            application/json:
              example:
                message: Stat points allocated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid request data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/reroll:
    post:
      summary: Reroll user stats
      description: Reroll a user (reset tasks) using the Fortify Potion.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User stats rerolled successfully
          content:
            application/json:
              example:
                message: User stats rerolled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/revive:
    post:
      summary: Revive user
      description: Revive the authenticated user, restoring health and removing any penalties.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User revived successfully
          content:
            application/json:
              example:
                message: User successfully revived
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/reset:
    post:
      summary: Reset user data
      description: Reset the authenticated user's data, removing all progress and starting over.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User data reset successful
          content:
            application/json:
              example:
                message: User data reset successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/rebirth:
      post:
        summary: Use Orb of Rebirth on user
        description: Rebirth the authenticated user, resetting their stats and granting rewards.
        tags:
        - user
        security:
          - userId: []
            apiToken: []
        responses:
          '200':
            description: User rebirth successful
            content:
              application/json:
                example:
                  message: User rebirth completed successfully
          '401':
            description: Unauthorized
            content:
              application/json:
                example:
                  error: Authentication failed. Please provide valid userId and apiToken.
  /v4/user/purchase-history:
    get:
      summary: Get user purchase history
      description: Retrieve the purchase history for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Purchase history retrieved successfully
          content:
            application/json:
              example:
                - purchaseId: purchase123
                  itemId: item456
                  itemName: Health Potion
                  price: 10
                  timestamp: 1645678900
                - purchaseId: purchase789
                  itemId: item012
                  itemName: Stamina Potion
                  price: 15
                  timestamp: 1645678920
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/tasks/user:
    get:
      summary: Get user's tasks
      description: Retrieve all tasks for the authenticated user.
      tags:
        - tasks
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              example:
                dailies:
                  - id: daily123
                    text: Complete daily exercise
                    completed: false
                  - id: daily456
                    text: Read 30 minutes
                    completed: true
                todos:
                  - id: todo789
                    text: Buy groceries
                    completed: false
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/groups:
    get:
      summary: Get user's groups
      description: Retrieve information about groups associated with the user.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: type
          in: query
          description: Type of groups to retrieve (party, guilds, privateGuilds, publicGuilds, tavern)
          required: true
          schema:
            type: string
            enum:
              - party
              - guilds
              - privateGuilds
              - publicGuilds
              - tavern
          example: party
        - name: paginate
          in: query
          description: Whether to paginate the results (true or false)
          schema:
            type: boolean
          example: false
        - name: page
          in: query
          description: Page number for paginated results (if paginate is true)
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        "200":
          description: User's groups retrieved successfully
          content:
            application/json:
              example:
                data:
                  - id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                    name: Group One
                    type: party
                  - id: a1780f33-xxyy-40e9-b50a-404e4964a09a
                    name: Group Two
                    type: guild
                total: 2
                page: 1
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
    post:
      summary: Create a new group
      description: Endpoint to create a new group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Group
                type:
                  type: string
                  enum:
                    - party
                    - guilds
                    - privateGuilds
                    - publicGuilds
                    - tavern
                  example: party
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: My Group
                type: party
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new group
  /v3/groups/{groupId}:
    get:
      summary: Get group information
      description: Retrieve information about a specific group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: groupId
          in: path
          description: ID of the group to retrieve information for
          required: true
          schema:
            type: string
          example: a1780f33-gggg-40e9-b50a-404e4964a09a
      responses:
        "200":
          description: Group information retrieved successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: Example Group
                type: guild
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Group not found
          content:
            application/json:
              example:
                error: Group with ID group123 not found
  /v3/groups/{groupId}/chat:
    parameters:
      - name: groupId
        in: path
        description: ID of the group
        required: true
        schema:
          type: string
        example: group123
    get:
      summary: Get group chat messages
      description: Retrieve the chat messages from the group's chat.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Chat messages retrieved successfully
          content:
            application/json:
              example:
                - id: chat456
                  groupId: group123
                  userId: user789
                  message: Hello everyone!
                  timestamp: 1645678900
                - id: chat789
                  groupId: group123
                  userId: user456
                  message: How are you doing?
                  timestamp: 1645678920
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
    post:
      summary: Send a chat message in a group
      description: Send a chat message in the specified group's chat.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The content of the chat message.
                  example: Hello everyone!
              required:
                - message
      responses:
        '201':
          description: Chat message sent successfully
          content:
            application/json:
              example:
                id: chat456
                groupId: group123
                userId: user789
                message: Hello everyone!
                timestamp: 1645678900
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid chat message data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/groups/party:
    get:
      summary: Get party information
      description: Retrieve information about the user's party.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Party information retrieved successfully
          content:
            application/json:
              example:
                name: The Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
        "404":
          description: Party not found
          content:
            application/json:
              example:
                error: Party not found for the user
    post:
      summary: Create a new party
      description: Endpoint to create a new party for the user.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Party
                leader:
                  type: string
                  example: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  type: array
                  items:
                    type: string
                  example:
                    - a1780f33-xxxx-40e9-b50a-404e4964a09a
                    - a1780f33-yyyy-40e9-b50a-404e4964a09a
      responses:
        "201":
          description: Party created successfully
          content:
            application/json:
              example:
                name: My Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new party
        "409":
          description: Conflict
          content:
            application/json:
              example:
                error: Party already exists for the user
  /v3/groups/party/quests:
    post:
      summary: Create a new quest
      description: Endpoint to create a new quest for the party.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: my_quest
                text:
                  type: string
                  example: Defeat the Dragon
                challengeRating:
                  type: number
                  example: 5
      responses:
        "200":
          description: Quest created successfully
          content:
            application/json:
              example:
                success: true
                message: Quest created successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
  /v3/challenges:
    post:
      summary: Create a challenge
      description: Create a new challenge.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group:
                  type: string
                  description: The UUID of the group associated with the challenge.
                  example: group123
                name:
                  type: string
                  description: The name of the challenge.
                  example: Fitness Challenge
                shortName:
                  type: string
                  description: The short name or abbreviation of the challenge.
                  example: Fit Challenge
                summary:
                  type: string
                  description: A brief summary of the challenge.
                  example: Join our fitness challenge and stay active!
                description:
                  type: string
                  description: The detailed description of the challenge.
                  example: This challenge aims to promote regular exercise and healthy habits.
                official:
                  type: boolean
                  description: Specifies whether the challenge is an official Habitica challenge.
                  example: false
                prize:
                  type: number
                  description: The prize or reward associated with the challenge.
                  example: 0
              required:
                - group
                - name
                - shortName
      responses:
        '201':
          description: Challenge created successfully
          content:
            application/json:
              example:
                id: challenge123
                name: Fitness Challenge
                active: true
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid challenge data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/challenges/user:
    get:
      summary: Get challenges for a user
      description: Get challenges the user has access to. Includes public challenges, challenges belonging to the user's group, and challenges the user has already joined. Returns 10 results per page.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: page
          in: query
          description: This parameter can be used to specify the page number for the user challenges result (the initial page is number 0).
          required: true
          schema:
            type: number
            example: 0
        - name: member
          in: query
          description: If set to true it limits results to challenges where the user is a member.
          required: false
          schema:
            type: string
        - name: owned
          in: query
          description: If set to owned it limits results to challenges owned by the user. If set to not_owned it limits results to challenges not owned by the user.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Optional query parameter to filter results to challenges that include (even partially) the search query parameter in the name or description.
          required: false
          schema:
            type: string
        - name: categories
          in: query
          description: Optional comma separated list of categories. If set it limits results to challenges that are part of the given categories.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User challenges retrieved successfully
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/challenges/{challengeId}:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge to retrieve
        required: true
        schema:
          type: string
        example: challenge123
    get:
      summary: Get challenge by ID
      description: Retrieve information about a specific challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge retrieved successfully
          content:
            application/json:
              example:
                id: challenge123
                name: Fitness Challenge
                active: true
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
    put:
      summary: Update a challenge
      description: Update the specified challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new full name of the challenge.
                  example: Updated Challenge
                summary:
                  type: string
                  description: The new challenge summary.
                description:
                  type: string
                  description: The new challenge description.
      responses:
        '200':
          description: Challenge updated successfully
          content:
            application/json:
              example:
                id: challenge123
                name: Updated Challenge
                active: true
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid challenge data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
    delete:
      summary: Delete a challenge
      description: Delete the specified challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '204':
          description: Challenge deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
  /v3/challenges/{challengeId}/join:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge
        required: true
        schema:
          type: string
        example: challenge123
    post:
      summary: Join a challenge
      description: Join the specified challenge.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge joined successfully
          content:
            application/json:
              example:
                message: You have successfully joined the challenge
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
  /v3/challenges/{challengeId}/clone:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge to clone
        required: true
        schema:
          type: string
        example: challenge123
    post:
      summary: Clone a challenge
      description: Create a clone of the specified challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '201':
          description: Challenge cloned successfully
          content:
            application/json:
              example:
                id: clonedChallenge456
                name: Cloned Challenge
                active: true
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
  /v3/challenges/{challengeId}/export/csv:
    parameters:
          - name: challengeId
            in: path
            description: ID of the challenge to export
            required: true
            schema:
              type: string
            example: challenge123
    get:
      summary: Export Challenge to CSV
      description: Export the specified challenge to a CSV file.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: CSV exported successfully
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Challenge not found
          content:
            application/json:
              example:
                error: Challenge with ID challenge123 not found
  /v3/user/webhook:
    get:
      summary: Get user webhooks
      description: Retrieve all webhooks registered by the authenticated user.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhooks retrieved successfully
          content:
            application/json:
              example:
                - id: webhook123
                  url: https://example.com/webhook/endpoint
                  event: task.completed
                - id: webhook456
                  url: https://example.com/webhook/endpoint2
                  event: task.updated
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
    post:
      summary: Create user webhook
      description: "Create a new webhook for the authenticated user. (Possible types: taskActivity, groupChatReceived, userActivity, questActivity)"
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: "The webhook's id (Default value: Randomly Generated UUID)."
                label:
                  type: string
                  description: A label to remind you what this webhook does
                url:
                  type: string
                  description: The URL where the webhook events will be sent.
                  example: https://example.com/webhook/endpoint
                enabled:
                  type: boolean
                  description: If the webhook should be enabled (default true)
                  example: true
                type:
                  type: string
                  description: The webhook's type.
                  enum:
                    - taskActivity
                    - groupChatReceived
                    - userActivity
                    - questActivity
                  example: taskActivity
                options:
                  type: object
                  description: "The webhook's options. Will differ depending on type. Required for 'groupChatReceived' type. If a webhook supports options, the default values are displayed in the examples below."
                  properties:
                    created:
                      type: boolean
                      example: false
                    updated:
                      type: boolean
                      example: false
                    deleted:
                      type: boolean
                      example: false
                    scored:
                      type: boolean
                      example: true
              required:
                - url
      responses:
        "201":
          description: Webhook created successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/endpoint
                event: task.completed
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid webhook data provided
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/webhook/{id}:
    parameters:
      - name: id
        in: path
        description: ID (UUID) of the webhook to retrieve
        required: true
        schema:
          type: string
        example: webhook123
    get:
      summary: Get user webhook by ID
      description: Retrieve information about a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhook retrieved successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/endpoint
                event: task.completed
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
    put:
      summary: Update user webhook by ID
      description: Update information of a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The URL where the webhook events will be sent.
                  example: https://example.com/webhook/endpoint
                label:
                  type: string
                  description: A label to remind you what this webhook does
                enabled:
                  type: boolean
                  description: If the webhook should be enabled (default true)
                  example: true
                type:
                  type: string
                  description: The webhook's type.
                  enum:
                    - taskActivity
                    - groupChatReceived
                    - userActivity
                    - questActivity
                  example: taskActivity
                options:
                  type: object
                  description: "The webhook's options. Will differ depending on type. Required for 'groupChatReceived' type. If a webhook supports options, the default values are displayed in the examples below."
                  properties:
                    created:
                      type: boolean
                      example: false
                    updated:
                      type: boolean
                      example: false
                    deleted:
                      type: boolean
                      example: false
                    scored:
                      type: boolean
                      example: true
      responses:
        "200":
          description: Webhook updated successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/new-endpoint
                event: task.updated
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid webhook data provided
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
    delete:
      summary: Delete user webhook by ID
      description: Delete a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "204":
          description: Webhook deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
  /v3/models/{model}/paths:
    parameters:
      - name: model
        in: path
        description: Model name
        required: true
        schema:
          type: string
          enum:
            - user
            - group
            - challenge
            - tag
            - habit
            - daily
            - todo
            - reward
        example: user
    get:
      summary: Get paths for a specific model
      description: Retrieve the paths associated with the specified model.
      responses:
        '200':
          description: Paths retrieved successfully
          content:
            application/json:
              example:
                - /models/model123/paths/path1
                - /models/model123/paths/path2
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: Model not found
          content:
            application/json:
              example:
                error: Model with name model123 not found
  /v3/news:
    get:
      summary: Get latest Bailey announcement
      description: Get latest Bailey announcement
      tags:
        - news
      responses:
        '200':
          description: News article retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  html:
                    type: string
                    description: News article.
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid request parameters
  /v4/news/read:
    post:
      summary: Mark the latest Bailey announcement as read
      description: Mark the latest Bailey announcement as read
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: News articles marked as read successfully
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid request data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v4/news:
    post:
      summary: Create news article
      description: Create a new news article in the Habitica application.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPost'
      responses:
        '201':
          description: News article created successfully
          content:
            application/json:
              example:
                id: article123
                title: New Feature Release
                text: We are excited to announce the release of a new feature that will enhance your Habitica experience.
                credits: OpenAI
                author: John Doe
                publishDate: "2017-07-21T17:32:28Z"
                published: true
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid news article data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v4/news/{postId}:
    parameters:
      - name: postId
        in: path
        description: ID of the news post to retrieve
        required: true
        schema:
          type: string
        example: article123
    get:
      summary: Get news post by ID
      description: Retrieve a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: News post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsPost'
              example:
                id: article123
                title: New Feature Release
                text: We are excited to announce the release of a new feature that will enhance your Habitica experience.
                credits: OpenAI
                author: John Doe
                publishDate: "2017-07-21T17:32:28Z"
                published: true
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: News post not found
          content:
            application/json:
              example:
                error: News post with ID article123 not found
    put:
      summary: Update news post by ID
      description: Update a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPost'
      responses:
        '200':
          description: News post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsPost'
              example:
                id: article123
                title: Updated Feature Release
                text: Updated content of the news post.
                credits: OpenAI
                author: John Doe
                publishDate: '2023-07-05T10:00:00Z'
                published: true
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid news post data provided
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: News post not found
          content:
            application/json:
              example:
                error: News post with ID article123 not found

    delete:
      summary: Delete news post by ID
      description: Delete a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '204':
          description: News post deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        '404':
          description: News post not found
          content:
            application/json:
              example:
                error: News post with ID article123 not found