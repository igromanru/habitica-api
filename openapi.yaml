---
openapi: 3.0.3
info:
  title: Habitica API
  version: 3.0.0
  description: Habitica API v3 representation as OpenAPI spec
  contact: 
    name: Specification repository
    url: https://github.com/igromanru/habitica-api
externalDocs:
  url: https://habitica.com/apidoc/
  description: Official Habitica V3 API Documentation
servers:
  - url: https://habitica.com/api/v3/
    description: Habitica API server
components:
  securitySchemes:
    userId:
      type: apiKey
      in: header
      name: x-api-user
    apiToken:
      type: apiKey
      in: header
      name: x-api-key
tags: 
  - name: default
  - name: user
    description: User related requests
  - name: tasks
    description: Tasks related requests
  - name: party
    description: Party related requests
  - name: groups
    description: Groups related requests
  - name: challenges
    description: Challenges related requests
  - name: webhook
    description: Webhooks
paths:
  /status:
    get:
      summary: Get Habitica API status
      description: Endpoint to get the current status of the Habitica API.
      responses:
        "200":
          description: Habitica API status retrieved successfully
          content:
            application/json:
              example:
                status: up
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: down
                message: The Habitica API is currently experiencing issues
  /cron:
    post:
      summary: Run cron
      description:
        This causes cron to run. It assumes that the user has already been
        shown the Record Yesterday's Activity ("Check off any Dailies you did
        yesterday") screen and so it will immediately apply damage for
        incomplete due Dailies.
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Cron executed successfully
          content:
            application/json:
              example:
                success: true
                message: Cron executed successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
  /members/{memberId}:
    parameters:
      - name: memberId
        in: path
        description: ID of the member to retrieve
        required: true
        schema:
          type: string
        example: member123
    get:
      summary: Get member by ID
      description: Retrieve information about a specific member by member ID.
      responses:
        "200":
          description: Member retrieved successfully
          content:
            application/json:
              example:
                id: member123
                username: john_doe
                displayName: John Doe
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Member not found
          content:
            application/json:
              example:
                error: Member with ID member123 not found
  /user:
    get:
      summary: Get user information
      description: Retrieve information about the user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              example:
                _id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                username: my_username
                email: my_email@example.com
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of the user to retrieve information for
        required: true
        schema:
          type: string
        example: a1780f33-xxxx-40e9-b50a-404e4964a09a
    get:
      summary: Get user information
      description: Retrieve information about a specific user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              example:
                _id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                username: my_username
                email: my_email@example.com
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: User not found
          content:
            application/json:
              example:
                error: User with ID a1780f33-xxxx-40e9-b50a-404e4964a09a not found
  /user/custom-day-start:
    post:
      summary: Set Custom Day Start time for user
      description: Set the custom day start time for a user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dayStart:
                  type: number
                  description: The hour number (0-23) for the day to begin. If not supplied, it will default to 0.
                  default: 0
                  example: 2
      responses:
        "200":
          description: Custom day start time set successfully
          content:
            application/json:
              example:
                success: true
                data:
                  message: Your custom day start has changed.
                notifications: []
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                error: BadRequest
                message: User validation failed
                errors:
                  - message: Path `preferences.dayStart` (25) is more than the maximum allowed value (23).
                    path: preferences.dayStart
                    value: 25
  /user/reroll:
    post:
      summary: Reroll user stats
      description: Reroll a user (reset tasks) using the Fortify Potion.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User stats rerolled successfully
          content:
            application/json:
              example:
                message: User stats rerolled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/revive:
    post:
      summary: Revive user
      description: Revive the authenticated user, restoring health and removing any penalties.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User revived successfully
          content:
            application/json:
              example:
                message: User successfully revived
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/reset:
    post:
      summary: Reset user data
      description: Reset the authenticated user's data, removing all progress and starting over.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User data reset successful
          content:
            application/json:
              example:
                message: User data reset successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/rebirth:
      post:
        summary: Use Orb of Rebirth on user
        description: Rebirth the authenticated user, resetting their stats and granting rewards.
        tags:
        - user
        security:
          - userId: []
            apiToken: []
        responses:
          '200':
            description: User rebirth successful
            content:
              application/json:
                example:
                  message: User rebirth completed successfully
          '401':
            description: Unauthorized
            content:
              application/json:
                example:
                  error: Authentication failed. Please provide valid userId and apiToken.
  /tasks/user:
    get:
      summary: Get user's tasks
      description: Retrieve all tasks for the authenticated user.
      tags:
        - tasks
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              example:
                dailies:
                  - id: daily123
                    text: Complete daily exercise
                    completed: false
                  - id: daily456
                    text: Read 30 minutes
                    completed: true
                todos:
                  - id: todo789
                    text: Buy groceries
                    completed: false
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /groups:
    get:
      summary: Get user's groups
      description: Retrieve information about groups associated with the user.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: type
          in: query
          description: Type of groups to retrieve (party, guilds, privateGuilds, publicGuilds, tavern)
          required: true
          schema:
            type: string
            enum:
              - party
              - guilds
              - privateGuilds
              - publicGuilds
              - tavern
          example: party
        - name: paginate
          in: query
          description: Whether to paginate the results (true or false)
          schema:
            type: boolean
          example: false
        - name: page
          in: query
          description: Page number for paginated results (if paginate is true)
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        "200":
          description: User's groups retrieved successfully
          content:
            application/json:
              example:
                data:
                  - id: a1780f33-xxxx-40e9-b50a-404e4964a09a
                    name: Group One
                    type: party
                  - id: a1780f33-xxyy-40e9-b50a-404e4964a09a
                    name: Group Two
                    type: guild
                total: 2
                page: 1
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
    post:
      summary: Create a new group
      description: Endpoint to create a new group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Group
                type:
                  type: string
                  enum:
                    - party
                    - guilds
                    - privateGuilds
                    - publicGuilds
                    - tavern
                  example: party
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: My Group
                type: party
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new group
  /groups/{groupId}:
    get:
      summary: Get group information
      description: Retrieve information about a specific group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: groupId
          in: path
          description: ID of the group to retrieve information for
          required: true
          schema:
            type: string
          example: a1780f33-gggg-40e9-b50a-404e4964a09a
      responses:
        "200":
          description: Group information retrieved successfully
          content:
            application/json:
              example:
                id: a1780f33-gggg-40e9-b50a-404e4964a09a
                name: Example Group
                type: guild
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Group not found
          content:
            application/json:
              example:
                error: Group with ID group123 not found
  /groups/party:
    get:
      summary: Get party information
      description: Retrieve information about the user's party.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Party information retrieved successfully
          content:
            application/json:
              example:
                name: The Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to access this information
        "404":
          description: Party not found
          content:
            application/json:
              example:
                error: Party not found for the user
    post:
      summary: Create a new party
      description: Endpoint to create a new party for the user.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Party
                leader:
                  type: string
                  example: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  type: array
                  items:
                    type: string
                  example:
                    - a1780f33-xxxx-40e9-b50a-404e4964a09a
                    - a1780f33-yyyy-40e9-b50a-404e4964a09a
      responses:
        "201":
          description: Party created successfully
          content:
            application/json:
              example:
                name: My Party
                leader: a1780f33-xxxx-40e9-b50a-404e4964a09a
                members:
                  - a1780f33-xxxx-40e9-b50a-404e4964a09a
                  - a1780f33-yyyy-40e9-b50a-404e4964a09a
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: You must be logged in to create a new party
        "409":
          description: Conflict
          content:
            application/json:
              example:
                error: Party already exists for the user
  /groups/party/quests:
    post:
      summary: Create a new quest
      description: Endpoint to create a new quest for the party.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: my_quest
                text:
                  type: string
                  example: Defeat the Dragon
                challengeRating:
                  type: number
                  example: 5
      responses:
        "200":
          description: Quest created successfully
          content:
            application/json:
              example:
                success: true
                message: Quest created successfully
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: Invalid input data
  /user/webhook:
    get:
      summary: Get user webhooks
      description: Retrieve all webhooks registered by the authenticated user.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhooks retrieved successfully
          content:
            application/json:
              example:
                - id: webhook123
                  url: https://example.com/webhook/endpoint
                  event: task.completed
                - id: webhook456
                  url: https://example.com/webhook/endpoint2
                  event: task.updated
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
    post:
      summary: Create user webhook
      description: "Create a new webhook for the authenticated user. (Possible types: taskActivity, groupChatReceived, userActivity, questActivity)"
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: "The webhook's id (Default value: Randomly Generated UUID)."
                label:
                  type: string
                  description: A label to remind you what this webhook does
                url:
                  type: string
                  description: The URL where the webhook events will be sent.
                  example: https://example.com/webhook/endpoint
                enabled:
                  type: boolean
                  description: If the webhook should be enabled (default true)
                  example: true
                type:
                  type: string
                  description: The webhook's type.
                  enum:
                    - taskActivity
                    - groupChatReceived
                    - userActivity
                    - questActivity
                  example: taskActivity
                options:
                  type: object
                  description: "The webhook's options. Will differ depending on type. Required for 'groupChatReceived' type. If a webhook supports options, the default values are displayed in the examples below."
                  properties:
                    created:
                      type: boolean
                      example: false
                    updated:
                      type: boolean
                      example: false
                    deleted:
                      type: boolean
                      example: false
                    scored:
                      type: boolean
                      example: true
              required:
                - url
      responses:
        "201":
          description: Webhook created successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/endpoint
                event: task.completed
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid webhook data provided
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /user/webhook/{id}:
    parameters:
      - name: id
        in: path
        description: ID (UUID) of the webhook to retrieve
        required: true
        schema:
          type: string
        example: webhook123
    get:
      summary: Get user webhook by ID
      description: Retrieve information about a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhook retrieved successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/endpoint
                event: task.completed
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
    put:
      summary: Update user webhook by ID
      description: Update information of a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The URL where the webhook events will be sent.
                  example: https://example.com/webhook/endpoint
                label:
                  type: string
                  description: A label to remind you what this webhook does
                enabled:
                  type: boolean
                  description: If the webhook should be enabled (default true)
                  example: true
                type:
                  type: string
                  description: The webhook's type.
                  enum:
                    - taskActivity
                    - groupChatReceived
                    - userActivity
                    - questActivity
                  example: taskActivity
                options:
                  type: object
                  description: "The webhook's options. Will differ depending on type. Required for 'groupChatReceived' type. If a webhook supports options, the default values are displayed in the examples below."
                  properties:
                    created:
                      type: boolean
                      example: false
                    updated:
                      type: boolean
                      example: false
                    deleted:
                      type: boolean
                      example: false
                    scored:
                      type: boolean
                      example: true
      responses:
        "200":
          description: Webhook updated successfully
          content:
            application/json:
              example:
                id: webhook123
                url: https://example.com/webhook/new-endpoint
                event: task.updated
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                error: Invalid webhook data provided
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
    delete:
      summary: Delete user webhook by ID
      description: Delete a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "204":
          description: Webhook deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
        "404":
          description: Webhook not found
          content:
            application/json:
              example:
                error: Webhook with ID webhook123 not found
