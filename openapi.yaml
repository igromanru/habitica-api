---
openapi: 3.0.3
info:
  title: Habitica API
  description: Habitica API representation as OpenAPI spec
  version: 1.0.0
  contact: 
    name: Specification repository
    url: https://github.com/igromanru/habitica-api
externalDocs:
  url: https://habitica.com/apidoc/
  description: Official Habitica API Documentation
servers:
  - url: https://habitica.com/api
    description: Habitica API server
tags: 
  - name: default
  - name: members
    description: Habitica members related requests
  - name: user
    description: User related requests
  - name: tasks
    description: Tasks related requests
  - name: tags
    description: Tags related requests
  - name: party
    description: Party related requests
  - name: groups
    description: Groups related requests
  - name: challenges
    description: Challenges related requests
  - name: webhook
    description: Webhooks
  - name: news
    description: Habitica News related requests
  - name: notifications
    description: Notifications related requests
components:
  securitySchemes:
    userId:
      type: apiKey
      in: header
      name: x-api-user
    apiToken:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    DataResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates the success status of the response.
        data:
          type: object
          description: The data object.
          additionalProperties: true
        notifications:
          type: array
          items:
            type: object
            additionalProperties: true
          description: An array of notifications.
        userV:
          type: number
          example: 4212
        appVersion:
          type: string
          description: The app version.
          example: "4.276.0"
    DataWithMessageResponse:
      allOf:
      - $ref: '#/components/schemas/DataResponse'
      - type: object
        properties:
          message:
            type: string
            description: Success message.
    ErrorMessageResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates the success status of the response.
          example: false
        error:
          type: string
          description: The error code or identifier.
          example: "NotAuthorized"
        message:
          type: string
          description: The error message.
          example: "Missing authentication headers."
    BugReportRequest:
      type: object
      properties:
        message:
          type: string
          description: User's Email.
        email:
          type: string
          description: Bug Report Message to sent.
    PrivateMessageRequest:
      type: object
      required:
        - message
        - toUserId
      properties:
        message:
          type: string
          description: The private message to be sent.
        toUserId:
          type: string
          format: uuid
          description: The UUID of the user to whom the message will be sent.
    NewsResponse:
      type: object
      properties:
        html:
          type: string
          description: Latest Bailey announcement as HTML.
    ChallengeRequest:
      type: object
      properties:
        group:
          type: string
          format: uuid
          description: The UUID of the group to which the challenge belongs.
        name:
          type: string
          description: The full name of the challenge.
          example: Fitness Challenge
        shortName:
          type: string
          description: A shortened name for the challenge, to be used as a tag.
        summary:
          type: string
          description: A short summary advertising the main purpose of the challenge; maximum 250 characters; if not supplied, challenge.name will be used.
        description:
          type: string
          description: A detailed description of the challenge.
        official:
          type: boolean
          description: Specifies whether the challenge is an official Habitica challenge.
          default: false
        prize:
          type: number
          description: The prize or reward associated with the challenge.
          default: 0
      required:
        - group
        - name
        - shortName
    ChallengeUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The new full name of the challenge.
        summary:
          type: string
          description: The new challenge summary.
        description:
          type: string
          description: The new challenge description.
    LeaveChallengeRequest:
      type: object
      properties:
        keep:
          type: string
          enum: [remove-all, keep-all]
          default: keep-all
          description: Specify whether to remove all or keep all challenge-related tasks upon leaving.
    NewsPost:
      type: object
      properties:
        title:
          type: string
          description: The title of the news article.
        text:
          type: string
          description: The content or body of the news article.
        credits:
          type: string
          description: The credits or source of the news article.
        author:
          type: string
          description: The author of the news article.
        publishDate:
          type: string
          format: date-time
          description: The timestamp of the news article publication.
        published:
          type: boolean
          description: Specifies whether the news article is published.
      required:
        - title
        - text
        - credits
        - author
        - publishDate
        - published
    StatAllocation:
      type: object
      properties:
        stats:
          type: object
          properties:
            int:
              type: number
              description: The number of points to allocate to INT (Intelligence) stat.
            str:
              type: number
              description: The number of points to allocate to STR (Strength) stat.
            con:
              type: number
              description: The number of points to allocate to CON (Constitution) stat.
            per:
              type: number
              description: The number of points to allocate to PER (Perception) stat.
          required:
            - int
            - str
            - con
            - per
    ChatMessageRequest:
      type: object
      properties:
        message:
          type: string
          description: The content of the chat message.
    UserTaskRequest:
      type: object
      properties:
        text:
          type: string
          description: The text to be displayed for the task.
        type:
          type: string
          description: "Task type, options are: `habit`, `daily`, `todo`, `reward`."
          enum:
            - habit
            - daily
            - todo
            - reward
          default: habit
        tags:
          type: array
          items:
            type: string
          description: Array of UUIDs of tags.
        alias:
          type: string
          description: Alias to assign to task.
        attribute:
          type: string
          description: "User's attribute to use, options are: `str`, `int`, `per`, `con`"
          enum:
            - str
            - int
            - per
            - con
          default: str
        checklist:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: The text description of the checklist item.
              completed:
                type: boolean
                description: Indicates whether the checklist item is completed or not.
          description: An array of checklist items.
        collapseChecklist:
          type: boolean
          description: Determines if a checklist will be displayed.
          default: false
        notes:
          type: string
          description: Additional notes or details about the task.
        date:
          type: string
          format: date-time
          description: Due date to be shown in task list. Only valid for type "todo."
        priority:
          type: number
          description: Difficulty, options are 0.1, 1, 1.5, 2; equivalent of Trivial, Easy, Medium, Hard.
          default: 1
          enum:
            - 0.1
            - 1
            - 1.5
            - 2
        reminders:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              startDate:
                type: string
                format: date
                example: "1/16/17"
              time:
                type: string
                format: date
                example: "1/16/17"
          description: "Array of reminders, each an object that must include: a UUID, startDate and time."
        frequency:
          type: string
          description: Values "weekly" and "monthly" enable use of the "repeat" field. All frequency values enable use of the "everyX" field. Value "monthly" enables use of the "weeksOfMonth" and "daysOfMonth" fields. Frequency is only valid for type "daily".
          default: weekly
          enum:
            - daily
            - weekly
            - monthly
            - yearly
        repeat:
          type: boolean
          description: 'List of objects for days of the week, Days that are true will be repeated upon. Only valid for type "daily". Any days not specified will be marked as true. Days are: su, m, t, w, th, f, s. Value of frequency must be "weekly".'
          example: true
        everyX:
          type: number
          description: Value of frequency must be "daily", the number of days until this daily task is available again.
          example: 1
        streak:
          type: number
          description: Number of days that the task has consecutively been checked off. Only valid for type "daily".
          example: 0
        daysOfMonth:
          type: array
          items:
            type: number
          description: Array of integers. Only valid for type "daily".
        weeksOfMonth:
          type: array
          items:
            type: string
          description: Array of integers. Only valid for type "daily".
        startDate:
          type: string
          format: date
          description: Date when the task will first become available. Only valid for type "daily".
        up:
          type: boolean
          description: Only valid for type "habit" If true, enables the "+" under "Directions/Action" for "Good habits".
          example: true
        down:
          type: boolean
          description: Only valid for type "habit" If true, enables the "-" under "Directions/Action" for "Bad habits".
          example: true
        value:
          type: number
          description: Only valid for type "reward." The cost in gold of the reward. Should be greater then or equal to 0.
          example: 0
      required:
        - text
        - type
    PurchaseItemRequest:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
          default: 1
          description: Count of items to buy. Defaults to 1 and is ignored for items where quantity is irrelevant.
    DeleteMessagesResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates the success status of the operation.
        data:
          type: object
          description: An empty object for the "data" property.
        notifications:
          type: array
          items:
            type: string
          description: An array of notifications.
    DeleteUserRequest:
      type: object
      properties:
        password:
          type: string
          description: The user's password for confirmation.
        feedback:
          type: string
          description: Any additional feedback or reason for deleting the account.
    CustomDayStartRequest:
      type: object
      properties:
        dayStart:
          type: number
          description: The hour number (0-23) for the day to begin. If not supplied, it will default to 0.
          default: 0
    CreateGroupRequest:
      type: object
      required:
        - name
        - type
        - privacy
      properties:
        name:
          type: string
          description: The name of the new group.
        type:
          type: string
          enum: ['guild', 'party']
          example: guild
          description: Type of group (guild or party)
        privacy:
          type: string
          enum: ['private', 'public']
          example: public
          description: Privacy of group (party MUST be private)
    AddManagerRequest:
      type: object
      required:
        - managerId
      properties:
        managerId:
          type: string
          format: uuid
          description: The UUID of the user to be added as a manager.
    WebhookCreateRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The webhook's id.
        url:
          type: string
          description: The webhook's URL.
        label:
          type: string
          description: A label to remind you what this webhook does.
        enabled:
          type: boolean
          description: If the webhook should be enabled.
          default: true
        type:
          type: string
          description: The webhook's type.
          enum: ['taskActivity', 'groupChatReceived', 'userActivity', 'questActivity']
          default: taskActivity
        options:
          type: object
          description: The webhook's options. Will differ depending on type. Required for `groupChatReceived` type. If a webhook supports options, the default values are displayed in the examples below.
          additionalProperties: true
      required:
        - url
    WebhookUpdateRequest:
      type: object
      properties:
        url:
          type: string
          description: The webhook's URL.
        label:
          type: string
          description: A label to remind you what this webhook does.
        enabled:
          type: boolean
          description: If the webhook should be enabled.
        type:
          type: string
          enum: ['taskActivity', 'groupChatReceived', 'userActivity', 'questActivity']
          description: The webhook's type.
        options:
          type: object
          description: The webhook's options. Will differ depending on type. The options are enumerated in the [add webhook examples](https://habitica.com/apidoc/#api-Webhook-UserAddWebhook).
          additionalProperties: true
    TagCreateOrUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the new tag.
          example: morning
    TagReorderRequest:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
          description: The ID of the tag to reorder.
        to:
          type: number
          description: The new position of the tag in the order.
paths:
  /v3/status:
    get:
      summary: Get Habitica API status
      description: | 
        Endpoint to get the current status of the Habitica API. \
        Returns typical data object with string property "status" that has the value `up`, if the server is running.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "500":
          description: Internal Server Error (The server is down)
  /v3/cron:
    post:
      summary: Run cron
      description:
        This causes cron to run. It assumes that the user has already been
        shown the Record Yesterday's Activity ("Check off any Dailies you did
        yesterday") screen and so it will immediately apply damage for
        incomplete due Dailies.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Cron executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v4/bug-report:
    post:
      summary: Submit a bug report
      description: Submit a bug report for the Habitica application.      
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BugReportRequest'
      responses:
        '200':
          description: Bug report submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request (The report message is missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified user could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/i18n/browser-script:
    get:
      summary: Returns the i18n JS script
      description: Returns the i18n JS script to make all the i18n strings available in the browser under window.i18n.strings. Does not require authentication.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: (function() {})()
  /v3/world-state:
    get:
      summary: Get World State
      description: Get the state for the game world
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
  /v3/members/{memberId}:
    parameters:
      - name: memberId
        in: path
        description: ID of the member to retrieve
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get habitica member by ID
      description: Retrieve information about a specific habitica member by member ID.
      tags:
        - members
      responses:
        "200":
          description: Member retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/members/{memberId}/achievements:
    parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The ID of the member whose achievements are to be retrieved.
    get:
      summary: Get member achievements object
      description: et a list of achievements of the requested member, grouped by basic / seasonal / special.
      tags:
        - members
      responses:
        '200':
          description: Successfully retrieved member achievements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/members/send-private-message:
    post:
      summary: Send Private Message
      description: Send a private message to another user.
      tags:
        - members
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateMessageRequest'
      responses:
        '200':
          description: Private message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}/members:
    parameters:
      - name: challengeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the challenge whose members are to be retrieved.
    get:
      summary: Get members for a challenge
      description: With a limit of 30 member per request (by default). To get all members run requests against this routes (updating the lastId query parameter) until you get less than 30 results. BETA You can also use ?includeAllMembers=true. This option is currently in BETA and may be removed in future. Its use is discouraged and its performances are not optimized especially for large challenges.
      tags:
        - members
      parameters:
        - name: lastId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Query parameter to specify the last member returned in a previous request to this route and get the next batch of results.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 30
          description: BETA Query parameter to specify the number of results to return. Max is 60.
        - name: includeTasks
          in: query
          required: false
          schema:
            type: boolean
          description: BETA Query parameter - If 'true' then include challenge tasks of each member.
        - name: includeAllPublicFields
          in: query
          required: false
          schema:
            type: boolean
          description: If set to true then all public fields for members will be returned (similar to when making a request for a single member).
      responses:
        '200':
          description: Successfully retrieved challenge members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/members:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group whose members are to be retrieved.
    get:
      summary: Get members for a group
      description: With a limit of 30 member per request (by default). To get all members run requests against this routes (updating the lastId query parameter) until you get less than 30 results (or the specified limit).
      tags:
        - members
      parameters:
        - name: lastId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Query parameter to specify the last member returned in a previous request to this route and get the next batch of results.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 30
          description: BETA Query parameter to specify the number of results to return. Max is 60.
        - name: includeTasks
          in: query
          required: false
          schema:
            type: boolean
          description: BETA Query parameter - If 'true' then include challenge tasks of each member.
        - name: includeAllPublicFields
          in: query
          required: false
          schema:
            type: boolean
          description: If set to true then all public fields for members will be returned (similar to when making a request for a single member).
      responses:
        '200':
          description: Successfully retrieved group members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user:
    get:
      summary: Get user information
      description: Retrieve information about the user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    delete:
      summary: Delete User Account [Danger Zone]
      description: |
        ## !!!Danger Zone!!!
        Delete the user account associated with the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
      responses:
        '200':
          description: User account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/anonymized:
    get:
      summary: Get anonymized user data
      description: Retrieve anonymized data for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Anonymized user data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/class/cast/{spellId}:
    post:
      summary: Cast a skill (spell) on yourself or a target
      description: |
        **Mage:** fireball = "Burst of Flames", mpheal = "Ethereal Surge", earth = "Earthquake", frost = "Chilling Frost" \
        **Warrior:** smash = "Brutal Smash", defensiveStance = "Defensive Stance", valorousPresence = "Valorous Presence", intimidate = "Intimidating Gaze" \
        **Rogue:** pickPocket = "Pickpocket", backStab = "Backstab", toolsOfTrade = "Tools of the Trade", stealth = "Stealth" \
        **Healer:** heal = "Healing Light", protectAura = "Protective Aura", brightness = "Searing Brightness", healAll = "Blessing" \
        **Transformation Items:** snowball = "Snowball", spookySparkles = "Spooky Sparkles", seafoam = "Seafoam", shinySeed = "Shiny Seed"
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: spellId
          in: path
          description: ID of the spell to cast
          required: true
          schema:
            type: string
            enum: [fireball, mpheal, earth, frost, smash, defensiveStance, valorousPresence, intimidate, pickPocket, backStab, toolsOfTrade, stealth, heal, protectAura, brightness, healAll, snowball, spookySparkles, seafoam, shinySeed]
        - name: targetId
          in: query
          description: User ID of the target (optional)
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: |
            Spell cast successfully. \
            Will return the modified targets. For party members only the necessary fields will be populated. The user is always returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/sleep:
    post:
      summary: Make the user start / stop sleeping (resting in the Inn)
      description: Toggles the sleep key under user preference true and false.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: '"data" current user.preferences.sleep state (true/false)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/mark-pms-read:
    post:
      summary: Mark Private Messages as read
      description: Mark all private messages as read for the current user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Returns user.inbox.newMessages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/open-mystery-item:
    post:
      summary: Open the Mystery Item box
      description: Open a mystery item box.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Returns Obtained items in data and a success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWithMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/purchase/{type}/{key}:
    parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum: [gems, eggs, hatchingPotions, premiumHatchingPotions, food, quests, gear, pets]
          default: food
        description: Type of item to purchase. Can be gems, eggs, hatchingPotions, premiumHatchingPotions, food, quests, gear, or pets.
      - name: key
        in: path
        required: true
        schema:
          type: string
        description: Item's key (use "gem" for purchasing gems).
    post:
      summary: Purchase Item
      description: Purchase an item of the specified type using the provided key.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItemRequest'
      responses:
        '200':
          description: Item purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWithMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/purchase-hourglass/{type}/{key}:
    parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
          enum: [pets, mounts]
          default: pets
          description: The type of item to purchase.
      - name: key
        in: path
        required: true
        schema:
          type: string
        description: The key for the mount/pet.
    post:
      summary: Purchase Hourglass-purchasable item
      description: Purchases an Hourglass-purchasable item. Does not include Mystery Item sets (use /api/v3/user/buy-mystery-set/{key}).
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseItemRequest'
      responses:
        '200':
          description: Hourglass item purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWithMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/read-card/{cardType}:
    parameters:
      - name: cardType
        in: path
        required: true
        schema:
          type: string
          enum: [birthday, greeting, nye, thankyou, valentine]
          description: Type of card to read
        description: The of card to read (e.g. birthday, greeting, nye, thankyou, valentine).
    post:
      summary: Read a card
      description: Read a card of the specified type for the current user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Returns user.items.special, user.flags.cardReceived and a success message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWithMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/change-class:
    post:
      summary: Change the class of the authenticated user
      description: | 
        User must be at least level 10. \
        If "class" is defined and user.flags.classSelected is false it'll change the class. \
        If user.preferences.disableClasses it'll enable classes, otherwise it sets user.flags.classSelected to false (costs 3 gems).
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: class
          in: query
          description: The new class to change to
          required: true
          schema:
            type: string
            enum: [warrior, rogue, wizard, healer]
      responses:
        '200':
          description: User class changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/disable-classes:
    post:
      summary: Disable Classes
      description: Disable the classes feature for the user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User classes disabled successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'                
  /v3/user/messages:
    delete:
      summary: Delete User Messages
      description: Delete all user messages.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Messages deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMessagesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: Authentication failed. Please provide valid userId and apiToken.
  /v3/user/messages/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the message to delete
        required: true
        schema:
          type: string
          format: uuid
    delete:
      summary: Delete User Message
      description: Delete a user message by its ID.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: |
           Message deleted successfully
           Contains all user.inbox.messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/custom-day-start:
    post:
      summary: Set Custom Day Start time for user
      description: Set the custom day start time for a user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomDayStartRequest'
      responses:
        "200":
          description: Custom day start time set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                error: BadRequest
                message: User validation failed
                errors:
                  - message: Path `preferences.dayStart` (25) is more than the maximum allowed value (23).
                    path: preferences.dayStart
                    value: 25
  /v3/user/buy-health-potion:
    post:
      summary: Buy a health potion
      description: Purchase a health potion for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Health potion purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request (Not enough gold for the purchase or health is already full)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/allocate:
    post:
      summary: Allocate a single Stat Point 
      description: Put a single Stat Point into a specific stat.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: stat
          in: query
          description: The stat to increase (str, con, int, or per)
          required: true
          schema:
            type: string
            enum: [str, con, int, per]
      responses:
        '200':
          description: Stat Point allocated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/allocate-now:
    post:
      summary: Allocate all Stat Points
      description: "Uses the user's chosen automatic allocation method, or if none, assigns all to STR. Note: will return success, even if there are 0 points to allocate."
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Stat points allocated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/allocate-bulk:
    post:
      summary: Allocate multiple Stat Points
      description: Allocate multiple stat points for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatAllocation'
      responses:
        '200':
          description: Stat points allocated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/reroll:
    post:
      summary: Reroll user stats
      description: Reroll a user (reset tasks) using the Fortify Potion.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User stats rerolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/revive:
    post:
      summary: Revive user
      description: Revive the authenticated user, restoring health and removing any penalties.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User revived successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/rebirth:
      post:
        summary: Use Orb of Rebirth on user
        description: Rebirth the authenticated user, resetting their stats and granting rewards.
        tags:
          - user
        security:
          - userId: []
            apiToken: []
        responses:
          '200':
            description: User rebirth successful
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DataResponse'
          '401':
            description: Unauthorized
            content:
              application/json:
                example:
                  error: Authentication failed. Please provide valid userId and apiToken.
  /v4/user/purchase-history:
    get:
      summary: Get user purchase history
      description: Retrieve the purchase history for the authenticated user.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Purchase history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/reset:
    post:
      summary: Reset user data
      description: Reset the authenticated user's data, removing all progress and starting over.
      tags:
        - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: User data reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/block/{uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the user to block.
    post:
      summary: Block/Unlock User
      description: Block / unblock a user from sending you a PM.
      tags:
          - user
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request (Invalid UUID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/tasks/user:
    get:
      summary: Get user's tasks
      description: Retrieve all tasks for the authenticated user.
      tags:
        - tasks
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    post:
      summary: Create User Task
      description: Create a new task for the user.
      tags:
        - tasks
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups:
    get:
      summary: Get user's groups
      description: Retrieve information about groups associated with the user.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: type
          in: query
          description: Type of groups to retrieve (party, guilds, privateGuilds, publicGuilds, tavern)
          required: true
          schema:
            type: string
            enum:
              - party
              - guilds
              - privateGuilds
              - publicGuilds
              - tavern
          example: party
        - name: paginate
          in: query
          description: Whether to paginate the results (true or false)
          schema:
            type: boolean
          example: false
        - name: page
          in: query
          description: Page number for paginated results (if paginate is true)
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        "200":
          description: User's groups retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    post:
      summary: Create a Group
      description: | 
        Create a group in Habitica. \
        Possible types: `guild` or `party` \
        Possible privacy: `public` or `private` (party MUST be private)
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}:
    get:
      summary: Get group information
      description: Retrieve information about a specific group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: groupId
          in: path
          description: ID of the group to retrieve information for
          required: true
          schema:
            type: string
          example: a1780f33-gggg-40e9-b50a-404e4964a09a
      responses:
        "200":
          description: Group information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/chat:
    parameters:
      - name: groupId
        in: path
        description: ID of the group
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get group chat messages
      description: Retrieve the chat messages from the group's chat.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Chat messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    post:
      summary: Send a chat message in a group
      description: Send a chat message in the specified group's chat.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: previousMsg
          in: query
          required: false
          schema:
            type: string
            description: The previous chat message's UUID which will force a return of the full group chat.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
      responses:
        '201':
          description: Chat message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request  (Your chat privileges have been revoked or the group ID is invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified group could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/chat/{chatId}/like:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the group containing the chat message.
      - name: chatId
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: The UUID of the chat message to like.
    post:
      summary: Like Group Chat Message
      description: Like a message in the group chat of a specific group.
      tags:
        - groups
      responses:
        '200':
          description: Message liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request (A user can't like his own message, invalid group or chat ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified group or message could't be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/party:
    get:
      summary: Get party information
      description: Retrieve information about the user's party.
      tags:
        - party
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Party information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Party not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/add-manager:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group to which the new manager will be added.
    post:
      summary: Add Group Manager
      description: Add a new manager to the specified group.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddManagerRequest'
      responses:
        '200':
          description: Manager added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/accept:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group (party) for which the quest will be accepted.
    post:
      summary: Accept Group Quest
      description: Accept a pending group (party) quest.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Group quest accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/reject:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group (party) for which the quest will be rejected.
    post:
      summary: Reject Group Quest
      description: Reject a pending group (party) quest.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Group quest rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/leave:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group from which the user wants to leave the quest.
    post:
      summary: Leave Group Quest
      description: Leave the ongoing quest.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Successfully left the group quest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/cancel:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group for which the active quest will be canceled.
    post:
      summary: Cancel Group Quest
      description: | 
        Cancel current not active quest. \
        **Required Permissions**: `QuestLeader` or `GroupLeader`.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Group quest canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/abort:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group for which the active quest will be aborted.
    post:
      summary: Abort Group Quest
      description: | 
        Abort the active group quest. \
        **Required Permissions**: `QuestLeader` or `GroupLeader`.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Group quest aborted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse' 
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/force-start:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group for which the quest will be force-started.
    post:
      summary: Force-Start Group Quest
      description: | 
        Force-start the quest, allowing the quest to begin immediately. \
        **Required Permissions**: `QuestLeader` or `GroupLeader`.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Group quest force-started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/groups/{groupId}/quests/invite/{questKey}:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The UUID of the group to which the quest invitation will be sent.
      - name: questKey
        in: path
        required: true
        schema:
          type: string
        description: The unique key of the quest.
    post:
      summary: Invite users to a quest
      description: Send a quest invitation to a user to join a group quest.
      tags:
        - groups
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Quest invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or Quest not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges:
    post:
      summary: Create a challenge
      description: Create a new challenge.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeRequest'
      responses:
        '200':
          description: Challenge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '201':
          description: The newly created challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request (Invalid or missing parameter in challenge body)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized (Not Authorized or User does not have enough gems to offer this prize)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (Group or User not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/user:
    get:
      summary: Get challenges for a user
      description: Get challenges the user has access to. Includes public challenges, challenges belonging to the user's group, and challenges the user has already joined. Returns 10 results per page.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      parameters:
        - name: page
          in: query
          description: This parameter can be used to specify the page number for the user challenges result (the initial page is number 0).
          required: true
          schema:
            type: number
            example: 0
        - name: member
          in: query
          description: If set to true it limits results to challenges where the user is a member.
          required: false
          schema:
            type: string
        - name: owned
          in: query
          description: If set to owned it limits results to challenges owned by the user. If set to not_owned it limits results to challenges not owned by the user.
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: Optional query parameter to filter results to challenges that include (even partially) the search query parameter in the name or description.
          required: false
          schema:
            type: string
        - name: categories
          in: query
          description: Optional comma separated list of categories. If set it limits results to challenges that are part of the given categories.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User challenges retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge to retrieve
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get challenges for a group
      description: Get challenges hosted in the specified group.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    put:
      summary: Update a challenge
      description: | 
        Update a challenge's name, description, or summary. \
        Required Permission: `ChallengeLeader`
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeUpdateRequest'
      responses:
        '200':
          description: Challenge updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    delete:
      summary: Delete a challenge
      description: Delete the specified challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}/join:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Join a challenge
      description: Join the specified challenge.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge joined successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}/leave:
    parameters:
        - name: challengeId
          in: path
          description: ID of the challenge to leave
          required: true
          schema:
            type: string
            format: uuid
    post:
      summary: Leave Challenge
      description: Leave a challenge by its ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveChallengeRequest'
      responses:
        '200':
          description: Successfully left the challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}/clone:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge to clone
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Clone a challenge
      description: Create a clone of the specified challenge by challenge ID.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Challenge cloned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/challenges/{challengeId}/export/csv:
    parameters:
      - name: challengeId
        in: path
        description: ID of the challenge to export
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Export Challenge to CSV
      description: Export the specified challenge to a CSV file.
      tags:
        - challenges
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: CSV exported successfully
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/webhook:
    get:
      summary: Get user webhooks
      description: Retrieve all webhooks registered by the authenticated user.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhooks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    post:
      summary: Create user webhook
      description: | 
        Create a new webhook for the authenticated user. \
        Possible types: `taskActivity`, `groupChatReceived`, `userActivity`, `questActivity`
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreateRequest'
      responses:
        "201":
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/user/webhook/{id}:
    parameters:
      - name: id
        in: path
        description: ID (UUID) of the webhook to retrieve
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user webhook by ID
      description: Retrieve information about a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhook retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    put:
      summary: Edit a webhook
      description: Can change `url`, `enabled`, `type`, and `options` properties. Cannot change `id`.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUpdateRequest'
      responses:
        '200':
          description: Webhook updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    delete:
      summary: Delete a webhook
      description: Delete a specific webhook by webhook ID.
      tags:
        - webhook
      security:
        - userId: []
          apiToken: []
      responses:
        "200":
          description: Webhook deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        "404":
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/models/{model}/paths:
    parameters:
      - name: model
        in: path
        description: Model name
        required: true
        schema:
          type: string
          enum:
            - user
            - group
            - challenge
            - tag
            - habit
            - daily
            - todo
            - reward
        example: user
    get:
      summary: Get paths for a specific model
      description: Retrieve the paths associated with the specified model.
      responses:
        '200':
          description: Paths retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Model not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/news:
    get:
      summary: Get latest Bailey announcement
      description: Get latest Bailey announcement as HTML
      tags:
        - news
      responses:
        '200':
          description: News article as HTML
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsResponse'
  /v4/news/read:
    post:
      summary: Mark the latest Bailey announcement as read
      description: Mark the latest Bailey announcement as read
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: News articles marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/news/tell-me-later:
    post:
      summary: Allow latest Bailey announcement to be read later
      description: Add a notification to allow viewing of the latest "New Stuff by Bailey" message. Prevent this specific Bailey message from appearing automatically
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Request to be notified later successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v4/news:
    post:
      summary: Create news article
      description: Create a new news article in the Habitica application.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPost'
      responses:
        '200':
          description: News article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v4/news/{postId}:
    parameters:
      - name: postId
        in: path
        description: ID of the news post to retrieve
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get news post by ID
      description: Retrieve a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: News post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        
        '404':
          description: News post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    put:
      summary: Update news post by ID
      description: Update a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsPost'
      responses:
        '200':
          description: News post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: News post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    delete:
      summary: Delete news post by ID
      description: Delete a news post by its ID.
      tags:
        - news
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: News post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: News post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/notifications/read:
    post:
      summary: Mark Notifications as Read
      description: Mark all notifications as read.
      tags:
        - notifications
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Notifications marked as read successfully, returns user.notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/notifications/see:
    post:
      summary: Mark Notifications as Seen
      description: Mark all notifications as seen.
      tags:
        - notifications
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Notifications marked as seen successfully, returns user.notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/notifications/{notificationId}/read:
    parameters:
      - name: notificationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The ID of the notification to mark as read.
    post:
      summary: Mark Notification as Read
      description: Mark a specific notification as read.
      tags:
        - notifications
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Notification marked as read successfully, returns user.notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/notifications/{notificationId}/see:
    parameters:
      - name: notificationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The ID of the notification to mark as seen.
    post:
      summary: Mark Notification as Seen
      description: Mark a specific notification as seen.
      tags:
        - notifications
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Notification marked as seen successfully, returns user.notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/tags:
    get:
      summary: Get all user's tags
      description: Get the list of tags for the user's tasks in Habitica.
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    post:
      summary: Create a new tag
      description: Create a new tag for the user's tasks in Habitica.
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateOrUpdateRequest'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/tags/{tagId}:
    parameters:
      - name: tagId
        in: path
        required: true
        schema:
          type: string
          format: uuid
          description: The ID of the tag.
    get:
      summary: Get a Tag
      description: Get the details of a specific tag for the user's tasks in Habitica.
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request ("tagId" must be a valid UUID corresponding to a tag belonging to the user.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified tag could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    put:
      summary: Update Tag
      description: Update the details of a specific tag for the user's tasks in Habitica.
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateOrUpdateRequest'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request ("tagId" must be a valid UUID corresponding to a tag belonging to the user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified tag could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
    delete:
      summary: Delete a user tag
      description: Delete a specific tag for the user's tasks in Habitica.
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request ("tagId" must be a valid UUID corresponding to a tag belonging to the user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified tag could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
  /v3/reorder-tags:
    post:
      summary: Reorder Tags
      description: | 
        Reorder the user's tags for tasks in Habitica. \
        **tagId**: Id of the tag to move \
        **to**: Position the tag is moving to
      tags:
        - tags
      security:
        - userId: []
          apiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagReorderRequest'
      responses:
        '200':
          description: Tags reordered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: Not Found (The specified tag could not be found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'